This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
src/
  lib/
    styles/
      table.css
    functions.ts
    index.ts
    true-model.svelte.ts
  routes/
    components/
      table/
        rows/
          THeader.svelte
          TRow.svelte
        Table.svelte
      balance_sheet.svelte
      balShAssumptions.svelte
      cash_flow.svelte
      income.svelte
      incStAssumptions.svelte
      revolver.svelte
      supporting_schedules.svelte
    +layout.svelte
    +page.svelte
  app.css
  app.d.ts
  app.html
.gitignore
.npmrc
.prettierignore
.prettierrc
eslint.config.js
package.json
README.md
svelte.config.js
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/routes/components/table/Table.svelte">
<!-- Table.svelte -->
<script lang="ts">

    import { setContext } from "svelte";

    let { title, header, rows } = $props();

</script>

<div class="container">
    <h4>{title}</h4>
    <table>
        <thead>
            {@render header()}
        </thead>
        <tbody>
            {@render rows()}
        </tbody>
    </table>
</div>
  
  <style>
    h4 {
        padding: 0;
        background-color: #a8a8a8;
        border-bottom: 1px solid #4b5563;
    }

    .container {
        background-color: black;
        font-family: 'IBM Plex Mono', monospace;
    }
  </style>
</file>

<file path="src/lib/index.ts">
// place files you want to import through the `$lib` alias in this folder.
</file>

<file path="src/lib/true-model.svelte.ts">
// financial-model.svelte.ts
// Centralized model combining all four files with optimized reactivity

// Model State - Single source of truth
export const assumptions = $state({
    // Assumptions (from assumptions.svelte.ts)
    incomeStatement: {
      unitsSold: 400,
      unitsSoldGrowth: 0.05,
      
      pricePerUnit: 496,
      pricePerUnitGrowth: 0.03,
      
      cogsRate: 0.43,
      cogsRateGrowth: 0.01,
      
      sgaRate: 0.35,
      sgaRateGrowth: 0.02,
      
      taxRate: 0.21,
      taxRateGrowth: 0.00
    },
    
    fixedAsset: {
      capEx: [15000, 12000, 10000, 7500, 7500],
      existingAssetUsefulLife: 10,
      newAssetUsefulLife: 10
    },
    
    balanceSheet: {
      ppeFromPreviousYear: 48990,
      arRate: 0,
      inventoryRate: 0,
      apRate: 0,
      longTermDebt: 40000,
      interestExpenseRate: 0.07
    }
  });
  
  // =========== PROJECTIONS ===========
  // From projections.svelte.ts
  
  // Income Statement Projections
  let unitsSoldProjs = $derived.by(() => {
    const { unitsSold, unitsSoldGrowth } = assumptions.incomeStatement;
    const years = 5;
    const projections = [unitsSold];
    
    for (let i = 1; i < years; i++) {
      projections[i] = projections[i-1] * (1 + unitsSoldGrowth);
    }
    
    return projections;
  });
  
  let pricePerUnitProjs = $derived.by(() => {
    const { pricePerUnit, pricePerUnitGrowth } = assumptions.incomeStatement;
    const years = 5;
    const projections = [pricePerUnit];
    
    for (let i = 1; i < years; i++) {
      projections[i] = projections[i-1] * (1 + pricePerUnitGrowth);
    }
    
    return projections;
  });
  
  let cogsRateProjs = $derived.by(() => {
    const { cogsRate, cogsRateGrowth } = assumptions.incomeStatement;
    const years = 5;
    const projections = [cogsRate];
    
    for (let i = 1; i < years; i++) {
      projections[i] = projections[i-1] * (1 + cogsRateGrowth);
    }
    
    return projections;
  });
  
  let sgaRateProjs = $derived.by(() => {
    const { sgaRate, sgaRateGrowth } = assumptions.incomeStatement;
    const years = 5;
    const projections = [sgaRate];
    
    for (let i = 1; i < years; i++) {
      projections[i] = projections[i-1] * (1 + sgaRateGrowth);
    }
    
    return projections;
  });
  
  let taxRateProjs = $derived.by(() => {
    const { taxRate, taxRateGrowth } = assumptions.incomeStatement;
    const years = 5;
    const projections = [taxRate];
    
    for (let i = 1; i < years; i++) {
      projections[i] = projections[i-1] * (1 + taxRateGrowth);
    }
    
    return projections;
  });
  
  // Balance Sheet Projections
  let longTermDebtProjs = $derived.by(() => {
    const { longTermDebt } = assumptions.balanceSheet;
    const years = 5;
    return new Array(years).fill(longTermDebt);
  });
  
  let interestExpenseRateProjs = $derived.by(() => {
    const { interestExpenseRate } = assumptions.balanceSheet;
    const years = 5;
    return new Array(years).fill(interestExpenseRate);
  });
  
  // =========== FIXED ASSETS ===========
  // From fixed-assets.svelte.ts
  
  let depreciationMatrix = $derived.by(() => {
    const { capEx, newAssetUsefulLife } = assumptions.fixedAsset;
    const years = 5;
    const result: number[][] = [];
    for (let i = 0; i < years; i++) {
      result[i] = [];
      for (let j = 0; j <= i; j++) {
        result[i][j] = -(capEx[j] / newAssetUsefulLife);
      }
    }
    return result;
  });
  
  let existingAssetDepreciation = $derived.by(() => {
    const { existingAssetUsefulLife } = assumptions.fixedAsset;
    const { ppeFromPreviousYear } = assumptions.balanceSheet;
    const years = 5;
    const depreciation = -(ppeFromPreviousYear / existingAssetUsefulLife);
    return Array(years).fill(depreciation);
  });
  
  let newAssetDepreciation = $derived.by(() => {
    const { capEx, newAssetUsefulLife } = assumptions.fixedAsset;
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      let sum = 0;
      for (let j = 0; j <= i; j++) {
        sum += capEx[j] / newAssetUsefulLife;
      }
      result[i] = -(sum);
    }
    return result;
  });
  
  let totalDepreciation = $derived.by(() => {
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      result[i] = existingAssetDepreciation[i] + newAssetDepreciation[i];
    }
    return result;
  });
  
  let beginningPPE = $derived.by(() => {
    const { ppeFromPreviousYear } = assumptions.balanceSheet;
    const years = 5;
    const result: number[] = [];
    result[0] = ppeFromPreviousYear;
    for (let i = 1; i < years; i++) {
      result[i] = result[i-1];
    }
    return result;
  });
  
  let endingPPE = $derived.by(() => {
    const { capEx } = assumptions.fixedAsset;
    const years = 5;
    const result: number[] = [];
    for (let i = 0; i < years; i++) {
      result[i] = beginningPPE[i] + capEx[i] + totalDepreciation[i];
    }
    return result;
  });
  
  // =========== INCOME STATEMENT ===========
  // From income-statement.svelte.ts
  
  let revenue = $derived.by(() => {
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      result[i] = unitsSoldProjs[i] * pricePerUnitProjs[i];
    }
    return result;
  });
  
  let cogs = $derived.by(() => {
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      result[i] = -(revenue[i] * cogsRateProjs[i]);
    }
    return result;
  });
  
  let grossProfit = $derived.by(() => {
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      result[i] = revenue[i] + cogs[i];
    }
    return result;
  });
  
  let sga = $derived.by(() => {
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      result[i] = -(revenue[i] * sgaRateProjs[i]);
    }
    return result;
  });
  
  let operatingIncome = $derived.by(() => {
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      result[i] = grossProfit[i] + sga[i] + totalDepreciation[i];
    }
    return result;
  });
  
  let interest = $derived.by(() => {
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      result[i] = -(longTermDebtProjs[i] * interestExpenseRateProjs[i]);
    }
    return result;
  });
  
  let earningsBeforeTax = $derived.by(() => {
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      result[i] = operatingIncome[i] + interest[i];
    }
    return result;
  });
  
  let taxes = $derived.by(() => {
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      result[i] = earningsBeforeTax[i] > 0 ? -(earningsBeforeTax[i] * taxRateProjs[i]) : 0;
    }
    return result;
  });
  
  let netIncome = $derived.by(() => {
    const years = 5;
    const result = [];
    for (let i = 0; i < years; i++) {
      result[i] = earningsBeforeTax[i] + taxes[i];
    }
    return result;
  });
  
  // =========== EXPORTED GETTERS ===========
  // These functions provide access to the reactive state
  
  // Return projections
  export function getProjections() {
    return {
      get unitsSold() { return unitsSoldProjs; },
      get pricePerUnit() { return pricePerUnitProjs; },
      get cogsRate() { return cogsRateProjs; },
      get sgaRate() { return sgaRateProjs; },
      get taxRate() { return taxRateProjs; },
      get longTermDebt() { return longTermDebtProjs; },
      get interestExpenseRate() { return interestExpenseRateProjs; }
    };
  }
  
  // Return fixed assets
  export function getFixedAssets() {
    return {
      get depreciationMatrix() { return depreciationMatrix; },
      get existingAssetDepreciation() { return existingAssetDepreciation; },
      get newAssetDepreciation() { return newAssetDepreciation; },
      get totalDepreciation() { return totalDepreciation; },
      get beginningPPE() { return beginningPPE; },
      get endingPPE() { return endingPPE; }
    };
  }
  
  // Return income statement
  export function getIncomeStatement() {
    return {
      get revenue() { return revenue; },
      get cogs() { return cogs; },
      get grossProfit() { return grossProfit; },
      get sga() { return sga; },
      get depreciation() { return totalDepreciation; },
      get operatingIncome() { return operatingIncome; },
      get interest() { return interest; },
      get earningsBeforeTax() { return earningsBeforeTax; },
      get taxes() { return taxes; },
      get netIncome() { return netIncome; }
    };
  }
  
  // Get assumptions
  export function getAssumptions() {
    return assumptions;
  }
</file>

<file path="src/routes/components/table/rows/THeader.svelte">
<script lang='ts'>

    const currentYear = new Date().getFullYear();
    const years:number[] = [];

    for (let i=0; i<5; i++) {
        years[i] = currentYear + i;
    }
    
    </script>
    
    <tr>
        <th></th>
        <th>Figures in ($)Millions</th>
        {#each years as year}
        <th>{year}</th>
        {/each}
    </tr>
    
    <style>
        th {
            padding: 0.25rem; /* px-1 */
            text-align: left; /* text-left */
            font-size: 0.75rem; /* text-xs */
            font-weight: 500; /* font-medium */
            color: #d9d2d4; /* text-[#d9d2d4] */
            text-transform: uppercase; /* uppercase */
            letter-spacing: 0.05em; /* tracking-wider */
            background-color: #272727; /* bg-[#272727] */
            border-right: 1px solid #333;
        }
    
    </style>
</file>

<file path="src/routes/components/table/rows/TRow.svelte">
<script lang='ts'>

import { formatNumber } from "$lib/functions";
import { getContext, setContext, untrack } from "svelte";

let { title, data, bold = false }:
{ title:string, data:number[], bold?:boolean
} = $props()

let cells:HTMLTableCellElement[] = $state([])

let highlighted = $derived.by(() => {
    if (data) {
        console.log("yes")
        return true;
    } else {
        return false;
    }
});

export function clearHighlighting(){
    highlighted = false;
}

// for (let i=0; i<5; i++){
    // 
//     const cleanup = $effect.root(() => {
//         $effect(() => {
//             // This tracks data[i]
//             data[i];
            
//             // Use untrack around the state modification to prevent the loop
//             untrack(() => {
//                 test = true;
//             });
            
//             console.log("highlighted");

//             return() => {
//                 untrack(() => {
//                 test = false;
//                 console.log("unhighlighted");
//                 });
//             }
//         });
//         return () => {
//         console.log('effect root cleanup');
//         };
//     });
// }



</script>

<tr class:bold={bold}>
    <td class="icon">
        <img src="/bloomberg-bar-graph.png" alt="icon">
    </td>
    <td class:indented={!bold}>{title}</td>
    {#each data as num, i}
        <td class:highlight={highlighted} id={String(i)}>{formatNumber(num)}</td>
    {/each}
</tr>

<style>
    tr {
        color: #efd9a4;
    }

    tr:hover {
        background-color: #2c2c2c;
    }

    .bold {
        color: #da9946;
    }

    .highlight {
        color: red;
    }

    /* @keyframes highlight {
        0% {
            background-color: green;
        }
        100% {
            background-color: intial;
        }
    } */

    td {
        border-right: 1px solid #333;
    }

    .indented {
        padding-left: 20px;
    }

    .icon {
        width: 15px; /* Force cell to be as narrow as possible */
        white-space: nowrap; /* Prevent text wrapping */
        padding: 2px; /* Add minimal padding */
        margin: 0;
        vertical-align: middle;
    }
    
    .icon img {
        display: block; /* Remove extra space below image */
        width: auto; /* Make the image its natural width */
        height: auto; /* Maintain aspect ratio */
    }

</style>
</file>

<file path="src/routes/components/balance_sheet.svelte">
<script lang="ts">

</script>

<div class="table-container">
    <div class="header">
        <h3>Balance Sheet</h3>
    </div>
    <table>
        <thead>
            <tr>
                <th>Figures in USD millions</th>
                <th>previous year</th> <!-- gap -->
                <th>current year and season2025F</th>
                <th>+1 year</th>
                <th>+1 year</th>
                <th>+1 year</th>
                <th>+1 year</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Cash & Cash Equivalents</td>
            </tr>
            <tr>
                <td>Accounts Receivable</td>
            </tr>
            <tr>
                <td>Inventory</td>
            </tr>
            <tr>
                <td>**Total Current Assets**</td>
            </tr>
            <tr></tr> <!-- gap -->
            <tr>
                <td>Property Plant & Equipment (PPE)</td> <!-- Selling, general and administrative expenses -->
            </tr>
            <tr>
                <td>**Total Assets**</td>
            </tr>
            <tr></tr> <!-- gap -->
            <tr>
                <td>Accounts Payable</td>
            </tr>
            <tr>
                <td>Revolver</td>
            </tr>
            <tr>
                <td>**Total Current Liabilities**</td>
            </tr>
            <tr>
                <td>Long Term Debt</td>
            </tr>
            <tr>
                <td>**Total Liabilities**</td>
            </tr>
            <tr></tr> <!-- gap -->
            <tr>
                <td>Common Stock</td>
            </tr>
            <tr>
                <td>Retained Earnings</td>
            </tr>
            <tr>
                <td>**Total Shareholder's Equity</td>
            </tr>
            <tr></tr> <!-- gap -->
            <tr>
                <td>**Total Liabilities & Equity</td>
            </tr>
            <tr></tr> <!-- gap -->
            <tr>
                <td>Balance Sheet Check</td>
            </tr>
        </tbody>
    </table>
</div>

<style>
</style>
</file>

<file path="src/routes/components/balShAssumptions.svelte">
<script lang="ts">
    import { getIncomeStatement } from "$lib/true-model.svelte";
    import { getAssumptions } from "$lib/true-model.svelte";

    let incomeStatement = getIncomeStatement();
    let assumptions = getAssumptions();

</script>

<div class="table-container">
    <div class="header">
        <h3>Balance Sheet Assumptions</h3>
    </div>
    <table>
        <thead>
            <tr>
                <th>Balance Assumptions</th>
                <th></th>
                <th>Figure</th>
                <th>Growth Rate</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Accounts Receivable as % of Revenue</td>
                <td></td>
                <td>
                    <input bind:value={assumptions.balanceSheet.arRate} type="number">
                </td>
                <td>%</td>
            </tr>
            <tr>
                <td>Inventory as % of COGS</td>
                <td></td>
                <td>
                    <input bind:value={assumptions.balanceSheet.inventoryRate} type="number">
                </td>
                <td>%</td>
            </tr>
            <tr>
                <td>Accounts Payable as % of COGS</td>
                <td></td>
                <td><input bind:value={assumptions.balanceSheet.apRate} type="number"></td>
                <td>%</td>
            </tr>
            <tr>
                <td>Long Term Debt</td>
                <td></td>
                <td><input bind:value={assumptions.balanceSheet.longTermDebt} type="number"></td>
                <td>%</td>
            </tr>
            <tr>
                <td>Interest Expense %</td>
                <td></td>
                <td><input bind:value={assumptions.balanceSheet.interestExpenseRate} type="number"></td>
            </tr>
            <tr>
                <td>Interest Expense</td>
                <td></td>
                <td>{(incomeStatement.interest[0]).toFixed(2)}</td>
            </tr>
        </tbody>
    </table>
</div>
</file>

<file path="src/routes/components/cash_flow.svelte">
<script lang="ts">

</script>

<div class="container">
    <h3>Cash Flow Statement</h3>
    <table>
        <thead>
            <tr>
                <th>Figures in USD millions</th>
                <th></th> <!-- gap -->
                <th>current year and season</th>
                <th>+1 year</th>
                <th>+1 year</th>
                <th>+1 year</th>
                <th>+1 year</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Net Income</td>
            </tr>
            <tr>
                <td>Depreciation</td>
            </tr>
            <tr>
                <td>Change in Accounts Reveivable</td>
            </tr>
            <tr>
                <td>Change in Inventory</td>
            </tr>
            <tr>
                <td>Change in Accounts Payable</td>
            </tr>
            <tr>
                <td>**Cash Flow From Operating Activities**</td>
            </tr>
            <tr></tr> <!-- gap -->
            <tr>
                <td>Capital Expenditures</td>
            </tr>
            <tr>
                <td>**Cash Flow from Investing Activities**</td>
            </tr>
            <tr>
                <td>Change in Long Term Debt</td>
            </tr>
            <tr>
                <td>Change in Revolver</td>
            </tr>
            <tr>
                <td>Chanfe in Common Stock</td>
            </tr>
            <tr>
                <td>Dividends</td>
            </tr>
            <tr>
                <td>**Cash Flow from Financing Activities**</td>
            </tr>
            <tr></tr> <!-- gap -->
            <tr>
                <td>Beginning of Year Cash Balance</td>
            </tr>
            <tr>
                <td>**Change in Cash**</td>
            </tr>
            <tr>
                <td>End of Year Cash Balance</td>
            </tr>
        </tbody>
    </table>
</div>

<style>
    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: left;
    }
</style>
</file>

<file path="src/routes/components/income.svelte">
<script lang="ts">

    import { getIncomeStatement } from "$lib/true-model.svelte";
    import { formatNumber } from "$lib/functions";
    import Theader from "./table/rows/THeader.svelte";
    import TRow from "./table/rows/TRow.svelte";
    import Table from "./table/Table.svelte";

    let incomeStatement = getIncomeStatement();

    let row_0:TRow;
    let row_1:TRow;
    let row_2:TRow;
    let row_3:TRow;
    let row_4:TRow;
    let row_5:TRow;
    let row_6:TRow;
    let row_7:TRow;
    let row_8:TRow;
    let row_9:TRow;

    $effect(() => {
        incomeStatement.taxes
        console.log('highlighting cleared')
        row_0.clearHighlighting()
        row_1.clearHighlighting()
        row_2.clearHighlighting()
        row_3.clearHighlighting()
        row_4.clearHighlighting()
        row_5.clearHighlighting()
        row_6.clearHighlighting()
        row_7.clearHighlighting()
        row_8.clearHighlighting()
        row_9.clearHighlighting()
    })
    
</script>


    <Table title="Income Statement">
        {#snippet header()}
            <Theader/>
        {/snippet}
        {#snippet rows()}
            <TRow bind:this={row_0} title="Revenue" data={incomeStatement.revenue} bold={true}/>
            <TRow bind:this={row_1} title="- COGS" data={incomeStatement.cogs}/>
            <TRow bind:this={row_2} title="Gross Profit (Loss)" data={incomeStatement.grossProfit} bold={true}/>
            <TRow bind:this={row_3} title="- SG&A" data={incomeStatement.sga}/>
            <TRow bind:this={row_4} title="- Depreciation" data={incomeStatement.depreciation}/>
            <TRow bind:this={row_5} title="Operating Income (Loss)" data={incomeStatement.operatingIncome} bold={true}/>
            <TRow bind:this={row_6} title="- Interest Expense" data={incomeStatement.interest}/>
            <TRow bind:this={row_7} title="Pretax income (Loss)" data={incomeStatement.earningsBeforeTax} bold={true}/>
            <TRow bind:this={row_8} title="- Taxes" data={incomeStatement.taxes}/>
            <TRow bind:this={row_9} title="Net Income (Loss)" data={incomeStatement.netIncome} bold={true}/>
        {/snippet}
    </Table>
</file>

<file path="src/routes/components/incStAssumptions.svelte">
<script lang="ts">
    import { getIncomeStatement } from "$lib/true-model.svelte";
    import { getAssumptions } from "$lib/true-model.svelte";

    let incomeStatement = getIncomeStatement();
    let assumptions = getAssumptions();

</script>

<div class="table-container">
    <div class="header">
        <h3>Assumptions</h3>
    </div>
    <div class="income-statement-assumptions">
        <table>
            <thead>
                <tr>
                    <th>Income Statement Assumptions</th>
                    <th></th>
                    <th>Figure</th>
                    <th>Growth Rate</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Units Sold</td>
                    <td></td>
                    <td>
                        <input bind:value={assumptions.incomeStatement.unitsSold} type="number">
                    </td>
                    <td>%</td>
                </tr>
                <tr>
                    <td>Price per Unit</td>
                    <td></td>
                    <td>
                        <input bind:value={assumptions.incomeStatement.pricePerUnit} type="number">
                    </td>
                    <td>%</td>
                </tr>
                <tr>
                    <td>COGS as % of Revenue</td>
                    <td></td>
                    <td><input bind:value={assumptions.incomeStatement.cogsRate} type="number"></td>
                    <td>%</td>
                </tr>
                <tr>
                    <td>SG&A as % of Revenue</td>
                    <td></td>
                    <td><input bind:value={assumptions.incomeStatement.sgaRate} type="number"></td>
                    <td>%</td>
                </tr>
                <tr>
                    <td>Tax Rate</td>
                    <td></td>
                    <td><input bind:value={assumptions.incomeStatement.taxRate} type="number"></td>
                    <td>%</td>
                </tr>
                <tr>
                    <td>Revenue</td>
                    <!-- <td>{incomeStatement.revenue[0]}</td> -->
                </tr>
                <tr>
                    <td>COGS</td>
                    <!-- <td>{incomeStatement.cogs[0]}</td> -->
                </tr>
            </tbody>
        </table>
    </div>
</div>

<style>
    
</style>
</file>

<file path="src/routes/components/revolver.svelte">
<script lang="ts">

</script>

<div class="container">
    <h3>Revolver</h3>
    <table>
        <thead>
            <tr>
                <th>Figures in USD millions</th>
                <th>previous year</th> <!-- gap -->
                <th>current year and season2025F</th>
                <th>+1 year</th>
                <th>+1 year</th>
                <th>+1 year</th>
                <th>+1 year</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Beginning Cash Balance</td>
            </tr>
            <tr>
                <td>Cash from Operations</td>
            </tr>
            <tr>
                <td>Cash from Investing</td>
            </tr>
            <tr>
                <td>Change in Long Term Debt</td>
            </tr>
            <tr>
                <td>Change in Common Stock</td>
            </tr>
            <tr>
                <td>Dividends</td>
            </tr>
            <tr>
                <td>**Cash Available for Revolver**</td>
            </tr>
            <tr></tr> <!-- gap -->
            <tr>
                <td>Revolver</td>
            </tr>
            <tr>
                <td>Beginning Balance</td>
            </tr>
            <tr>
                <td>Change in Revolver</td>
            </tr>
            <tr>
                <td>**Ending Balance**</td>
            </tr>
            <tr></tr> <!-- gap -->
            <tr>
                <td>Revolver Interest Rate</td>
            </tr>
            <tr>
                <td>Interest Expense</td>
            </tr>
            <tr>
                <td>**Total Interest Expense</td>
            </tr>
        </tbody>
    </table>
</div>

<style>
    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: left;
    }
</style>
</file>

<file path="src/routes/components/supporting_schedules.svelte">
<script lang="ts">
    import { getAssumptions } from "$lib/true-model.svelte";
    import { getFixedAssets } from "$lib/true-model.svelte";

    let assumptions = getAssumptions();
    let fixedAssets = getFixedAssets();
    
</script>

<div class="container">
    <h3>Supporting Schedule</h3>
    <table>
        <thead>
            <tr>
                <th>Fixed Assets Schedule</th>
            </tr>
            <tr>
                <th>Figures in USD millions</th>
                <th></th> <!-- gap -->
                <th>current year</th>
                <th>+1 year</th>
                <th>+1 year</th>
                <th>+1 year</th>
                <th>+1 year</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Capital Expenditure</td>
                <td></td> <!-- gap -->
                <td>
                    <input bind:value={assumptions.fixedAsset.capEx[0]} type="number">
                </td>
                <td>
                    <input bind:value={assumptions.fixedAsset.capEx[1]} type="number">
                </td>
                <td>
                    <input bind:value={assumptions.fixedAsset.capEx[2]} type="number">
                </td>
                <td>
                    <input bind:value={assumptions.fixedAsset.capEx[3]} type="number">
                </td>
                <td>
                    <input bind:value={assumptions.fixedAsset.capEx[4]} type="number">
                </td>
            </tr>
            <tr>
                <td></td> <!-- gap -->
            </tr> 
            <tr>
                <td>Existing Assets Useful Life (years)</td> <!-- for assets purchased before forecast period-->
                <td>
                    <input bind:value={assumptions.fixedAsset.existingAssetUsefulLife} type="number">
                </td>
            </tr>
            <tr>
                <td>New Assets Useful Life (years)</td>  <!-- for assets purchased during forecast period-->
                <td>
                    <input bind:value={assumptions.fixedAsset.newAssetUsefulLife} type="nubmer">
                </td>
            </tr>
            <tr>
                <td>PPE 2023 EOP</td> <!-- TODO: from balance sheet-->
                <td>{assumptions.balanceSheet.ppeFromPreviousYear}</td>
            </tr>
            <tr>
                <td></td> <!-- gap -->
            </tr> 
            <tr>
                <td></td>
                <td>**CapEx**</td>
                <td>current year</td>
                <td>+1 year</td>
                <td>+1 year</td>
                <td>+1 year</td>
                <td>+1 year</td>
            </tr>
            <tr>
                <td></td>
                <td>{assumptions.fixedAsset.capEx[0]}</td>
                <td>{assumptions.fixedAsset.capEx[0] / assumptions.fixedAsset.newAssetUsefulLife}</td>
                <td>{assumptions.fixedAsset.capEx[0] / assumptions.fixedAsset.newAssetUsefulLife}</td>
                <td>{assumptions.fixedAsset.capEx[0] / assumptions.fixedAsset.newAssetUsefulLife}</td>
                <td>{assumptions.fixedAsset.capEx[0] / assumptions.fixedAsset.newAssetUsefulLife}</td>
                <td>{assumptions.fixedAsset.capEx[0] / assumptions.fixedAsset.newAssetUsefulLife}</td>
            </tr>
            <tr>
                <td></td>
                <td>{assumptions.fixedAsset.capEx[1]}</td>
                <td></td>
                <td>{assumptions.fixedAsset.capEx[1] / assumptions.fixedAsset.newAssetUsefulLife}</td>
                <td>{assumptions.fixedAsset.capEx[1] / assumptions.fixedAsset.newAssetUsefulLife}</td>
                <td>{assumptions.fixedAsset.capEx[1] / assumptions.fixedAsset.newAssetUsefulLife}</td>
                <td>{assumptions.fixedAsset.capEx[1] / assumptions.fixedAsset.newAssetUsefulLife}</td>
            </tr>
            <tr>
                <td></td>
                <td>{assumptions.fixedAsset.capEx[2]}</td>
                <td></td>
                <td></td>
                <td>{assumptions.fixedAsset.capEx[2] / assumptions.fixedAsset.newAssetUsefulLife}</td>
                <td>{assumptions.fixedAsset.capEx[2] / assumptions.fixedAsset.newAssetUsefulLife}</td>
                <td>{assumptions.fixedAsset.capEx[2] / assumptions.fixedAsset.newAssetUsefulLife}</td>
            </tr>
            <tr>
                <td></td>
                <td>{assumptions.fixedAsset.capEx[3]}</td>
                <td></td>
                <td></td>
                <td></td>
                <td>{assumptions.fixedAsset.capEx[3] / assumptions.fixedAsset.newAssetUsefulLife}</td>
                <td>{assumptions.fixedAsset.capEx[3] / assumptions.fixedAsset.newAssetUsefulLife}</td>
            </tr>
            <tr>
                <td></td>
                <td>{assumptions.fixedAsset.capEx[4]}</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>{assumptions.fixedAsset.capEx[4] / assumptions.fixedAsset.newAssetUsefulLife}</td>
            </tr>
            <tr>
                <td></td> <!-- gap -->
            </tr>
            <tr>
                <td>Existing Asset Depreciation</td>  <!-- TODO: PPE 2023 / existingAssetUsefulLife (stays constant)-->
                <td></td>
                <td>{fixedAssets.existingAssetDepreciation[0]}</td>
                <td>{fixedAssets.existingAssetDepreciation[1]}</td>
                <td>{fixedAssets.existingAssetDepreciation[2]}</td>
                <td>{fixedAssets.existingAssetDepreciation[3]}</td>
                <td>{fixedAssets.existingAssetDepreciation[4]}</td>
            </tr>
            <tr>
                <td>New Asset Depreciation</td> <!-- TODO: sum of above column -->
                <td></td> <!-- gap -->
                <td>{fixedAssets.newAssetDepreciation[0]}</td>
                <td>{fixedAssets.newAssetDepreciation[1]}</td>
                <td>{fixedAssets.newAssetDepreciation[2]}</td>
                <td>{fixedAssets.newAssetDepreciation[3]}</td>
                <td>{fixedAssets.newAssetDepreciation[4]}</td>
            </tr>
            <tr>
                <td>**Total Depreciation**</td> <!-- TODO: sum of above -->
                <td></td>
                <td>{fixedAssets.newAssetDepreciation[0] + fixedAssets.existingAssetDepreciation[0]}</td>
                <td>{fixedAssets.newAssetDepreciation[1] + fixedAssets.existingAssetDepreciation[1]}</td>
                <td>{fixedAssets.newAssetDepreciation[2] + fixedAssets.existingAssetDepreciation[2]}</td>
                <td>{fixedAssets.newAssetDepreciation[3] + fixedAssets.existingAssetDepreciation[3]}</td>
                <td>{fixedAssets.newAssetDepreciation[4] + fixedAssets.existingAssetDepreciation[4]}</td>
            </tr>
            <tr>
                <td></td> <!-- gap -->
            </tr> 
            <tr>
                <td>Beginning PPE</td>
                <td></td>
                <td>{fixedAssets.beginningPPE[0]}</td>
                <td>{fixedAssets.beginningPPE[1]}</td>
                <td>{fixedAssets.beginningPPE[2]}</td>
                <td>{fixedAssets.beginningPPE[3]}</td>
                <td>{fixedAssets.beginningPPE[4]}</td>
            </tr>
            <tr>
                <td>CapEx</td>
                <td></td>
                <td>{assumptions.fixedAsset.capEx[0]}</td>
                <td>{assumptions.fixedAsset.capEx[1]}</td>
                <td>{assumptions.fixedAsset.capEx[2]}</td>
                <td>{assumptions.fixedAsset.capEx[3]}</td>
                <td>{assumptions.fixedAsset.capEx[4]}</td>
            </tr>
            <tr>
                <td>Depreciation</td>
                <td></td>
                <td>{fixedAssets.totalDepreciation[0]}</td>
                <td>{fixedAssets.totalDepreciation[1]}</td>
                <td>{fixedAssets.totalDepreciation[2]}</td>
                <td>{fixedAssets.totalDepreciation[3]}</td>
                <td>{fixedAssets.totalDepreciation[4]}</td>
            </tr>
            <tr>
                <td>**Ending PPE**</td>
                <td></td>
                <td>{fixedAssets.endingPPE[0]}</td>
                <td>{fixedAssets.endingPPE[1]}</td>
                <td>{fixedAssets.endingPPE[2]}</td>
                <td>{fixedAssets.endingPPE[3]}</td>
                <td>{fixedAssets.endingPPE[4]}</td>
            </tr>
            <tr>
                <td></td> <!-- gap -->
            </tr>
        </tbody>
    </table>
    <table>
        <thead>
            <tr>
                <th>Retained Earnings Schedule</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Beginning of Period RE</td>
            </tr>
            <tr>
                <td>Net Income</td>
            </tr>
            <tr>
                <td>Dividends</td>
            </tr>
            <tr>
                <td>**End of Period RE**</td>
            </tr>
        </tbody>
    </table>
</div>

<style>
    table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 1rem; /* Add spacing between tables */
    }

    th, td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: left;
    }

    input {
        width: 100%;
        border: none;
        outline: none;
    }
</style>
</file>

<file path="src/app.d.ts">
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};
</file>

<file path="src/app.html">
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>
</file>

<file path=".gitignore">
node_modules

# Output
.output
.vercel
.netlify
.wrangler
/.svelte-kit
/build

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*
</file>

<file path=".npmrc">
engine-strict=true
</file>

<file path=".prettierignore">
# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock
bun.lock
bun.lockb
</file>

<file path=".prettierrc">
{
	"useTabs": true,
	"singleQuote": true,
	"trailingComma": "none",
	"printWidth": 100,
	"plugins": ["prettier-plugin-svelte"],
	"overrides": [
		{
			"files": "*.svelte",
			"options": {
				"parser": "svelte"
			}
		}
	]
}
</file>

<file path="eslint.config.js">
import prettier from 'eslint-config-prettier';
import js from '@eslint/js';
import { includeIgnoreFile } from '@eslint/compat';
import svelte from 'eslint-plugin-svelte';
import globals from 'globals';
import { fileURLToPath } from 'node:url';
import ts from 'typescript-eslint';
import svelteConfig from './svelte.config.js';

const gitignorePath = fileURLToPath(new URL('./.gitignore', import.meta.url));

export default ts.config(
	includeIgnoreFile(gitignorePath),
	js.configs.recommended,
	...ts.configs.recommended,
	...svelte.configs.recommended,
	prettier,
	...svelte.configs.prettier,
	{
		languageOptions: {
			globals: { ...globals.browser, ...globals.node }
		},
		rules: { 'no-undef': 'off' }
	},
	{
		files: ['**/*.svelte', '**/*.svelte.ts', '**/*.svelte.js'],
		ignores: ['eslint.config.js', 'svelte.config.js'],
		languageOptions: {
			parserOptions: {
				projectService: true,
				extraFileExtensions: ['.svelte'],
				parser: ts.parser,
				svelteConfig
			}
		}
	}
);
</file>

<file path="README.md">
# sv

Everything you need to build a Svelte project, powered by [`sv`](https://github.com/sveltejs/cli).

## Creating a project

If you're seeing this, you've probably already done this step. Congrats!

```bash
# create a new project in the current directory
npx sv create

# create a new project in my-app
npx sv create my-app
```

## Developing

Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:

```bash
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open
```

## Building

To create a production version of your app:

```bash
npm run build
```

You can preview the production build with `npm run preview`.

> To deploy your app, you may need to install an [adapter](https://svelte.dev/docs/kit/adapters) for your target environment.
</file>

<file path="svelte.config.js">
import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
		adapter: adapter()
	}
};

export default config;
</file>

<file path="tsconfig.json">
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"moduleResolution": "bundler"
	}
	// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
	// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}
</file>

<file path="vite.config.ts">
import tailwindcss from '@tailwindcss/vite';
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [tailwindcss(), sveltekit()]
});
</file>

<file path="src/lib/functions.ts">
export function sumColumns(...rows:number[][]):number[] {

    const firstLength = rows[0].length;
    let allSameLength = true;
    let sums:number[] = new Array(firstLength).fill(0);
    let numRows = rows.length

    if (numRows < 2) {
        throw new Error('At least two rows are required for summation');
    }

    // Check all rows have same length
    for (let i = 1; i < rows.length; i++) {
        if (rows[i].length !== firstLength) {
            allSameLength = false;
            break;
        }
    }
    
    if (!allSameLength) {
        throw new Error('All rows must have the same length');
    }

    // Sum rows
    for (let i = 0; i < firstLength; i++) {
        for (let j = 0; j < numRows; j++) {
            sums[i] += rows[j][i];
        }
    }
    return sums;
}

export function formatNumber(value: number, decimals: number = 2): string {
    if (value === null || value === undefined) return '';
    
    // Format as currency
    const formatted = value.toFixed(decimals);
    
    // Add commas for thousands separator
    const parts = formatted.split('.');
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    
    // Add color formatting indicator (could be used with CSS classes)
    return value >= 0 ? parts.join('.') : ('(' + parts.join('.') + ')').replace('-','');
  }
</file>

<file path="package.json">
{
	"name": "test",
	"private": true,
	"version": "0.0.1",
	"type": "module",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"prepare": "svelte-kit sync || echo ''",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"lint": "eslint . && prettier --check .",
		"format": "prettier --write ."
	},
	"devDependencies": {
		"@eslint/compat": "^1.2.5",
		"@eslint/js": "^9.18.0",
		"@sveltejs/adapter-auto": "^4.0.0",
		"@sveltejs/kit": "^2.16.0",
		"@sveltejs/vite-plugin-svelte": "^5.0.0",
		"@tailwindcss/forms": "^0.5.9",
		"@tailwindcss/typography": "^0.5.15",
		"@tailwindcss/vite": "^4.0.0",
		"eslint": "^9.18.0",
		"eslint-config-prettier": "^10.0.1",
		"eslint-plugin-svelte": "^3.0.0",
		"globals": "^16.0.0",
		"prettier": "^3.4.2",
		"prettier-plugin-svelte": "^3.3.3",
		"svelte": "^5.0.0",
		"svelte-check": "^4.0.0",
		"tailwindcss": "^4.0.0",
		"typescript": "^5.0.0",
		"typescript-eslint": "^8.20.0",
		"vite": "^6.2.5"
	},
	"dependencies": {
		"fuchs": "^0.0.28"
	}
}
</file>

<file path="src/routes/+layout.svelte">
<script lang="ts">
	import '../app.css';

	let { children } = $props();
	
</script>

<!-- <style>

</style> -->

{@render children()}
</file>

<file path="src/app.css">
@import 'tailwindcss';
@plugin '@tailwindcss/forms';
@plugin '@tailwindcss/typography';

@import '$lib/styles/table.css';

@source "../node_modules/fuchs";

@theme {
	--color-base-50: var(--color-zinc-50);
	--color-base-100: var(--color-zinc-100);
	--color-base-200: var(--color-zinc-200);
	--color-base-300: var(--color-zinc-300);
	--color-base-400: var(--color-zinc-400);
	--color-base-500: var(--color-zinc-500);
	--color-base-600: var(--color-zinc-600);
	--color-base-700: var(--color-zinc-700);
	--color-base-800: var(--color-zinc-800);
	--color-base-900: var(--color-zinc-900);
	--color-base-950: var(--color-zinc-950);

	--color-accent-50: var(--color-emerald-50);
	--color-accent-100: var(--color-emerald-100);
	--color-accent-200: var(--color-emerald-200);
	--color-accent-300: var(--color-emerald-300);
	--color-accent-400: var(--color-emerald-400);
	--color-accent-500: var(--color-emerald-500);
	--color-accent-600: var(--color-emerald-600);
	--color-accent-700: var(--color-emerald-700);
	--color-accent-800: var(--color-emerald-800);
	--color-accent-900: var(--color-emerald-900);
	--color-accent-950: var(--color-emerald-950);
}
</file>

<file path="src/lib/styles/table.css">
/* on chanege color #dd9c42 */
  
  /* table {
    @apply bg-black shadow-md overflow-hidden font-mono text-base tracking-tight antialiased;
  } */
  
  /* .header {
    @apply px-0 py-0 bg-[#a8a8a8] border-b border-gray-700;
  } */
  
  /* .header h3 {
    @apply text-sm font-medium text-[#051028];
  } */
  
  /* table {
    @apply min-w-full divide-y divide-gray-700;
  }
  
  th {
    @apply px-1 py-1 text-left text-xs font-medium text-[#d9d2d4] uppercase tracking-wider bg-[#272727];
  } */
  
  /* tr td {
    @apply px-1 py-1 whitespace-nowrap text-sm text-[#efd9a4];
  } */

  /* td.indented {
    padding-left: 20px;
  }

  .icon {
    width: 30px;
    padding: 0;
    margin: 0;
    vertical-align: middle;
}

  tr:hover {
    background-color: #2c2c2c;
  }
  
  .tr-highlight {
    @apply px-1 py-1 whitespace-nowrap text-sm font-medium text-blue-100;
  }
  
  .tr-bold td {
    @apply text-[#da9946];
  } */
  
  /* .tr-divider {
    @apply h-4 bg-gray-800;
  } */
  
  /* .tr-alt td {
    @apply bg-gray-800;
  } */

  input {
    @apply text-white bg-black
  }

  .positive {
    @apply text-green-400;
  }
  
  .negative {
    @apply text-red-400;
  }

  /* table td, table th {
    border-right: 1px solid #333;
  } */
  
  /* Remove border from the last cell in each row */
    /* table td:last-child, table th:last-child {
    border-right: none;
  } */
</file>

<file path="src/routes/+page.svelte">
<script lang="ts">
    import Income from "./components/income.svelte";
    import BalanceSheet from "./components/balance_sheet.svelte";
    import CashflowStatement from "./components/cash_flow.svelte";
    import IncStAssumptions from "./components/incStAssumptions.svelte";
    import BalShAssumptions from "./components/balShAssumptions.svelte";
    import SupportingSchedules from "./components/supporting_schedules.svelte";
    import Revolver from "./components/revolver.svelte";


    import { Button } from 'fuchs';


</script>



<div class="master">
    <div class="row">
        <IncStAssumptions/>
        <Income/>
    </div>
    <div class="row">
        <!-- <BalShAssumptions/>
        <BalanceSheet/> -->
    </div>

    <!-- <BalShAssumptions/> -->


</div>

<style>
    .row {
        display: flex;
        gap: rem;
        width: 100%;
    }
</style>
</file>

</files>
